export declare type GenerateCommandOptions = {
    module?: boolean;
    middleware?: boolean;
    service?: boolean;
    router?: boolean;
    validator?: boolean;
    entity?: boolean;
    repository?: boolean;
    migration?: boolean;
    path?: string;
};
/**
 * Generate the required components from the user command.
 * @param name
 * @param module
 * @param middleware
 * @param service
 * @param router
 * @param validator
 * @param entity
 * @param repository
 * @param migration
 * @param path
 */
export declare function generateComponent(name: string, { module, middleware, service, router, validator, entity, repository, migration, path }: GenerateCommandOptions): void;
/**
 * Create the component file and fill it with the template content.
 * @param fullDestinationPath
 * @param componentName
 * @param componentFileName
 * @param content
 */
export declare function createComponentIfNecessary({ fullDestinationPath, componentName, componentFileName, }: {
    fullDestinationPath: string;
    componentName: string;
    componentFileName: string;
}, content: string): void;
/**
 * Lookup for the closest module from the component and update its imports.
 * @param fullDestinationPath
 */
export declare function updateModuleImports(fullDestinationPath: string): void;
