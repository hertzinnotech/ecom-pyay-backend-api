"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupClosestModule = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const slash_1 = require("./slash");
const slashRegexp = (0, slash_1.getSlashRegexpFromPlatform)();
/**
 * Lookup for the closest module component from the destination path.
 * @param fullDestinationPath
 * @param isMain
 */
function lookupClosestModule(fullDestinationPath, isMain = true) {
    let resolvedModulePath = undefined;
    const isRootDir = !!(0, fs_1.readdirSync)(fullDestinationPath, { withFileTypes: true }).some((component) => component.name === 'package.json');
    if (isRootDir) {
        return resolvedModulePath;
    }
    const components = (0, fs_1.readdirSync)(fullDestinationPath, { withFileTypes: true });
    const files = components.filter((component) => component.isFile());
    for (const file of files) {
        const componentFullDestinationPath = (0, path_1.resolve)(fullDestinationPath, file.name);
        const componentContent = (0, fs_1.readFileSync)(componentFullDestinationPath).toString();
        const containsModuleDecorator = !!componentContent.match(/@Module\(/g);
        if (containsModuleDecorator) {
            resolvedModulePath = componentFullDestinationPath;
            break;
        }
    }
    const directories = components.filter((component) => component.isDirectory());
    if (!resolvedModulePath) {
        for (const directory of directories) {
            const childFullDestinationPath = (0, path_1.resolve)(fullDestinationPath, directory.name);
            resolvedModulePath = lookupClosestModule(childFullDestinationPath, false);
            if (resolvedModulePath) {
                break;
            }
        }
    }
    /*
     * At this point, the module was not found in the current and children directories,
     * so we will look into the parent directory until the root is reached.
     */
    if (isMain && !resolvedModulePath) {
        const parentFullDestinationPath = fullDestinationPath.split(slashRegexp).slice(0, -1).join('/');
        if (parentFullDestinationPath) {
            const modulePath = lookupClosestModule(parentFullDestinationPath);
            if (modulePath) {
                resolvedModulePath = modulePath;
            }
        }
    }
    return resolvedModulePath ? (0, path_1.normalize)(resolvedModulePath) : resolvedModulePath;
}
exports.lookupClosestModule = lookupClosestModule;
//# sourceMappingURL=lookup-closest-module.js.map