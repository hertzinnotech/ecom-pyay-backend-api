"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminApiLoader = void 0;
const apply_middlewares_1 = require("./helpers/apply-middlewares");
const apply_routers_1 = require("./helpers/apply-routers");
/**
 * @internal
 * Apply middlewares and routes on the underlying @medusajs admin API.
 * @param app
 * @param middlewares
 * @param routers
 */
async function adminApiLoader(app, middlewares, routers) {
    const adminMiddlewares = middlewares
        .map((middleware) => (Object.assign(Object.assign({}, middleware), { routes: middleware.routes
            .filter((route) => route.path.startsWith('/admin'))
            .map((route) => (Object.assign(Object.assign({}, route), { path: route.path.replace('/admin', '') }))) })))
        .filter((middleware) => middleware.routes.length);
    const adminRouters = routers
        .map((router) => (Object.assign(Object.assign({}, router), { routes: router.routes
            .filter((route) => route.path.startsWith('/admin'))
            .map((route) => (Object.assign(Object.assign({}, route), { path: route.path.replace('/admin', '') }))) })))
        .filter((route) => route.routes.length);
    const adminAuthRouteLoader = await Promise.resolve().then(() => require('@medusajs/medusa/dist/api/routes/admin/auth'));
    const originalAdminAuthRouteLoader = adminAuthRouteLoader.default;
    adminAuthRouteLoader.default = (app) => {
        (0, apply_middlewares_1.applyBeforeAuthMiddleware)(app, adminMiddlewares);
        (0, apply_routers_1.applyBeforeAuthRouters)(app, adminRouters);
        originalAdminAuthRouteLoader(app);
    };
    const adminAppRouteLoader = await Promise.resolve().then(() => require('@medusajs/medusa/dist/api/routes/admin/apps'));
    const originalAdminAppRouteLoader = adminAppRouteLoader.default;
    adminAppRouteLoader.default = (app) => {
        (0, apply_middlewares_1.applyAfterAuthMiddleware)(app, adminMiddlewares);
        (0, apply_routers_1.applyAfterAuthRouters)(app, adminRouters);
        originalAdminAppRouteLoader(app);
    };
}
exports.adminApiLoader = adminApiLoader;
//# sourceMappingURL=admin-api.loader.js.map