"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideEntity = exports.registerEntity = exports.overrideEntitiesLoader = exports.entitiesLoader = void 0;
const _1 = require("./");
const awilix_1 = require("awilix");
const core_1 = require("../core");
const logger = core_1.Logger.contextualize('EntitiesLoader');
/**
 * @internal
 * Load all custom entities into the underlying @medusajs instance.
 * @param entities
 * @param container
 */
async function entitiesLoader(entities, container) {
    logger.log('Loading custom entities into the underlying @medusajs');
    let count = 0;
    for (const entityOptions of entities) {
        if (!entityOptions.override) {
            registerEntity(container, entityOptions);
            logger.log(`Entity loaded - ${(0, _1.lowerCaseFirst)(entityOptions.metatype.name)}`);
            ++count;
        }
    }
    logger.log(`${count} entities registered`);
}
exports.entitiesLoader = entitiesLoader;
/**
 * @internal
 * Load all custom entities that override @medusajs instance entities.
 * @param entities
 */
async function overrideEntitiesLoader(entities) {
    logger.log('Loading overridden entities into the underlying @medusajs');
    let count = 0;
    for (const entityOptions of entities) {
        if (entityOptions.override) {
            await overrideEntity(entityOptions);
            logger.log(`Entity overridden - ${entityOptions.metatype.name}`);
            ++count;
        }
    }
    logger.log(`${count} entities overridden`);
}
exports.overrideEntitiesLoader = overrideEntitiesLoader;
function registerEntity(container, entityOptions) {
    var _a;
    const { metatype: entity } = entityOptions;
    const resolutionKey = (_a = entityOptions.resolutionKey) !== null && _a !== void 0 ? _a : `${(0, _1.lowerCaseFirst)(entity.name)}${!entity.name.toLowerCase().includes('entity') ? 'Entity' : ''}`;
    container.register({
        [resolutionKey]: (0, awilix_1.asClass)(entity),
    });
    container.registerAdd('db_entities', (0, awilix_1.asValue)(entity));
}
exports.registerEntity = registerEntity;
async function overrideEntity(entityOptions) {
    const { metatype: entity, override } = entityOptions;
    const fileName = `${entity.name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()}`;
    const originalEntityModule = await Promise.resolve().then(() => require('@medusajs/medusa/dist/models/' + fileName));
    originalEntityModule[override.name] = entity;
}
exports.overrideEntity = overrideEntity;
//# sourceMappingURL=entities.loader.js.map