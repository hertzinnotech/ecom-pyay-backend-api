"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyAfterAuthMiddleware = exports.applyBeforeAuthMiddleware = void 0;
const core_1 = require("../../core");
const logger = core_1.Logger.contextualize('MiddlewaresLoader');
/**
 * @internal
 * Apply all middlewares on the app that must be applied before the @medusajs authentication
 * @param app
 * @param middlewares
 */
function applyBeforeAuthMiddleware(app, middlewares) {
    logger.log('Loading custom middlewares to apply before the underlying @medusajs authentication');
    let count = 0;
    for (const middlewareOptions of middlewares) {
        const { requireAuth } = middlewareOptions;
        if (!requireAuth) {
            applyMiddleware(app, middlewareOptions);
            logger.log(`Middleware before auth loaded - ${middlewareOptions.metatype.name}`);
            ++count;
        }
    }
    logger.log(`${count} before auth middleware registered`);
}
exports.applyBeforeAuthMiddleware = applyBeforeAuthMiddleware;
/**
 * @internal
 * Apply all middlewares on the app that must be applied after the @medusajs authentication
 * @param app
 * @param middlewares
 */
function applyAfterAuthMiddleware(app, middlewares) {
    logger.log('Loading custom middlewares to apply after the underlying @medusajs authentication');
    let count = 0;
    for (const middlewareOptions of middlewares) {
        const { requireAuth } = middlewareOptions;
        if (requireAuth) {
            applyMiddleware(app, middlewareOptions);
            logger.log(`Middleware after auth loaded - ${middlewareOptions.metatype.name}`);
            ++count;
        }
    }
    logger.log(`${count} after auth middleware registered`);
}
exports.applyAfterAuthMiddleware = applyAfterAuthMiddleware;
function applyMiddleware(app, middleware) {
    middleware.routes.some((route) => {
        app[route.method.toLowerCase()](route.path, new middleware.metatype().consume);
    });
}
//# sourceMappingURL=apply-middlewares.js.map