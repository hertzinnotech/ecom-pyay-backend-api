"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storeApiLoader = void 0;
const apply_middlewares_1 = require("./helpers/apply-middlewares");
const apply_routers_1 = require("./helpers/apply-routers");
/**
 * @internal
 * Apply middlewares and routes on store API.
 * @param app
 * @param middlewares
 * @param routers
 */
async function storeApiLoader(app, middlewares, routers) {
    const storeMiddlewares = middlewares
        .map((middleware) => (Object.assign(Object.assign({}, middleware), { routes: middleware.routes
            .filter((route) => route.path.startsWith('/store'))
            .map((route) => (Object.assign(Object.assign({}, route), { path: route.path.replace('/store', '') }))) })))
        .filter((middleware) => middleware.routes.length);
    const storeRouters = routers
        .map((router) => (Object.assign(Object.assign({}, router), { routes: router.routes
            .filter((route) => route.path.startsWith('/store'))
            .map((route) => (Object.assign(Object.assign({}, route), { path: route.path.replace('/store', '') }))) })))
        .filter((route) => route.routes.length);
    const storeAuthRouteLoader = await Promise.resolve().then(() => require('@medusajs/medusa/dist/api/routes/store/auth'));
    const originalStoreAuthRouteLoader = storeAuthRouteLoader.default;
    storeAuthRouteLoader.default = (app) => {
        (0, apply_middlewares_1.applyBeforeAuthMiddleware)(app, storeMiddlewares);
        (0, apply_routers_1.applyBeforeAuthRouters)(app, storeRouters);
        originalStoreAuthRouteLoader(app);
    };
    const storeCollectionRouteLoader = await Promise.resolve().then(() => require('@medusajs/medusa/dist/api/routes/store/collections'));
    const originalStoreCollectionRouteLoader = storeCollectionRouteLoader.default;
    storeCollectionRouteLoader.default = (app) => {
        (0, apply_middlewares_1.applyAfterAuthMiddleware)(app, storeMiddlewares);
        (0, apply_routers_1.applyAfterAuthRouters)(app, storeRouters);
        originalStoreCollectionRouteLoader(app);
    };
}
exports.storeApiLoader = storeApiLoader;
//# sourceMappingURL=store-api.loader.js.map