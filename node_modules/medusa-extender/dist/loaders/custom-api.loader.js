"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customApiLoader = void 0;
const apply_middlewares_1 = require("./helpers/apply-middlewares");
const apply_routers_1 = require("./helpers/apply-routers");
/**
 * @internal
 * Apply middlewares and routes on the underlying @medusajs top API.
 * @param app
 * @param middlewares
 * @param routers
 */
async function customApiLoader(app, middlewares, routers) {
    const topMiddlewares = middlewares
        .map((middleware) => (Object.assign(Object.assign({}, middleware), { routes: middleware.routes.filter((route) => {
            return !route.path.startsWith('/admin') && !route.path.startsWith('/store');
        }) })))
        .filter((middleware) => middleware.routes.length);
    const topRouters = routers
        .map((router) => (Object.assign(Object.assign({}, router), { routes: router.routes.filter((route) => {
            return !route.path.startsWith('/admin') && !route.path.startsWith('/store');
        }) })))
        .filter((route) => route.routes.length);
    const adminRouteLoader = await Promise.resolve().then(() => require('@medusajs/medusa/dist/api/routes/admin/index'));
    const originalAdminRouteLoader = adminRouteLoader.default;
    adminRouteLoader.default = (app, container, config) => {
        (0, apply_middlewares_1.applyBeforeAuthMiddleware)(app, topMiddlewares);
        (0, apply_middlewares_1.applyAfterAuthMiddleware)(app, topMiddlewares);
        (0, apply_routers_1.applyBeforeAuthRouters)(app, topRouters);
        (0, apply_routers_1.applyAfterAuthRouters)(app, topRouters);
        originalAdminRouteLoader(app, container, config);
    };
}
exports.customApiLoader = customApiLoader;
//# sourceMappingURL=custom-api.loader.js.map