/// <reference types="node" />
import { EventEmitter } from 'events';
import { Type } from './types';
import { AwilixContainer } from 'awilix';
/**
 * Extended event emitter to register methods that must be call when certain events are triggered and relay the handling to the API package
 */
declare class CustomEventEmitter extends EventEmitter {
    #private;
    constructor();
    /**
     * Register a new event handler.
     * @param eventName The name of the event that has to be triggered
     * @param propertyName The name of the class property that will handle the event
     * @param metatype The object that contains the property above
     */
    register<T>(eventName: string | symbol, propertyName: string, metatype: Type<T>): void;
    /**
     * Apply all event handlers hold by the `listenerDescriptors`.
     * Only unregister and register again non singleton based event listeners.
     * No duplicate listener can exist on one handler.
     * @param container The IoC container that allow to resolve instance
     */
    registerListeners(container: AwilixContainer): void;
    /**
     * Emit an asynchrone event entity based and wait for the result.
     * @param eventName The event that must be triggered
     * @param values The data that are passed to the event handler
     */
    emitAsync<T>(eventName: string | symbol, values: Record<string, unknown>): Promise<T | never>;
}
/**
 * @internal
 * Export the instance of the event emmiter.
 */
export declare const customEventEmitter: CustomEventEmitter;
export {};
