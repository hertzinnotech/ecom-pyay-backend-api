"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRegexpIfValid = exports.upperCaseFirst = exports.lowerCaseFirst = exports.Omit = exports.attachOrReplaceEntitySubscriber = exports.repositoryMixin = void 0;
const typeorm_1 = require("typeorm");
/**
 * For repository context, you should extends repository and the medusa target repository.
 * Since it is not possible to use multiple extend, you can use that utilities to apply multiple extends.
 * @param source
 */
function repositoryMixin(source) {
    const klass = class Base extends typeorm_1.Repository {
    };
    Object.getOwnPropertyNames(source.prototype).forEach((name) => {
        if (name !== 'constructor' && !klass.hasOwnProperty(name)) {
            Object.defineProperty(klass.prototype, name, Object.getOwnPropertyDescriptor(source.prototype, name));
        }
    });
    return klass;
}
exports.repositoryMixin = repositoryMixin;
/**
 * Attach a new subscriber to a specific entities.
 * @param connection The database connection
 * @param Subscriber The subscriber to attach
 * @param transactionalEntityManager The transactional entity manager to pass the transaction through
 */
function attachOrReplaceEntitySubscriber(connection, Subscriber, transactionalEntityManager) {
    const subscriberIndex = connection.subscribers.findIndex((subscriber) => {
        return subscriber.constructor.name === Subscriber.name;
    });
    const subscriberReplacement = new Subscriber(transactionalEntityManager);
    if (subscriberIndex < 0) {
        connection.subscribers.push(subscriberReplacement);
    }
    else {
        connection.subscribers.splice(subscriberIndex, 1, subscriberReplacement);
    }
}
exports.attachOrReplaceEntitySubscriber = attachOrReplaceEntitySubscriber;
/**
 * Allow to omit some property from a class.
 * @param Class
 * @param keys
 * @constructor
 */
const Omit = (Class, keys) => Class;
exports.Omit = Omit;
/**
 * Lower case the first character of the input string.
 * @param str
 */
function lowerCaseFirst(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
exports.lowerCaseFirst = lowerCaseFirst;
/**
 * Upper case the first character of the input string.
 * @param str
 */
function upperCaseFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.upperCaseFirst = upperCaseFirst;
function buildRegexpIfValid(str) {
    try {
        const m = str.match(/^([/~@;%#'])(.*?)\1([gimsuy]*)$/);
        if (m) {
            const regexp = new RegExp(m[2], m[3]);
            return regexp;
        }
    }
    catch (e) { }
    return;
}
exports.buildRegexpIfValid = buildRegexpIfValid;
//# sourceMappingURL=utils.js.map