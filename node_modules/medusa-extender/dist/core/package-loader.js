"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageManagerCommand = exports.loadPackages = void 0;
const child_process_1 = require("child_process");
const detect_package_manager_1 = require("detect-package-manager");
const fs_1 = require("fs");
/**
 * @Internal
 * Load packages at run time.
 * @param logger
 * @param packages The packages descriptors that must be installed
 */
async function loadPackages(logger, packages) {
    logger.log('Installing the necessary packages if they are not already installed');
    const installCommand = await getPackageManagerCommand();
    for (const { name, version, isDevDependency } of packages) {
        const packageJson = await Promise.resolve().then(() => require(`${process.cwd()}/package.json`));
        if (packageJson.dependencies[name]) {
            logger.log(`Skipping installation of ${name}@${version}. package already installed`);
            continue;
        }
        logger.log(`Installing ${name}@${version}...`);
        try {
            (0, child_process_1.execSync)(`${installCommand} ${isDevDependency ? '-D' : ''} ${name}@${version}`, {
                cwd: process.cwd(),
                env: process.env,
            });
            if (isDevDependency) {
                packageJson.devDependencies[name] = `^${version}`;
            }
            else {
                packageJson.dependencies[name] = `^${version}`;
            }
            (0, fs_1.writeFileSync)(`${process.cwd()}/package.json`, JSON.stringify(packageJson, null, 2));
        }
        catch (e) {
            logger.error(`Unable to install ${name}@${version}`);
            process.exit(1);
        }
    }
    logger.log('Packages installed');
}
exports.loadPackages = loadPackages;
/**
 * @Internal
 * Return the install command from the user package manager.
 */
async function getPackageManagerCommand() {
    const packageManager = await (0, detect_package_manager_1.detect)({ cwd: process.cwd() });
    const installCmd = packageManager === 'npm'
        ? 'npm i'
        : packageManager === 'yarn'
            ? 'yarn'
            : packageManager === 'pnpm'
                ? 'pnpm add'
                : null;
    if (!installCmd) {
        throw new Error('Unable to find the package manager to use (npm, yarn, pnpm, ...).');
    }
    return installCmd;
}
exports.getPackageManagerCommand = getPackageManagerCommand;
//# sourceMappingURL=package-loader.js.map