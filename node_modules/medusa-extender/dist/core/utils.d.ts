import { Connection, EntityManager, EntitySubscriberInterface, Repository } from 'typeorm';
import { Constructor, MixinReturnType } from './types';
/**
 * For repository context, you should extends repository and the medusa target repository.
 * Since it is not possible to use multiple extend, you can use that utilities to apply multiple extends.
 * @param source
 */
export declare function repositoryMixin<TEntity, TSource>(source: Constructor<TSource>): MixinReturnType<Repository<TEntity>, TSource>;
/**
 * Attach a new subscriber to a specific entities.
 * @param connection The database connection
 * @param Subscriber The subscriber to attach
 * @param transactionalEntityManager The transactional entity manager to pass the transaction through
 */
export declare function attachOrReplaceEntitySubscriber<T extends Constructor<EntitySubscriberInterface<unknown>>>(connection: Connection, Subscriber: T, transactionalEntityManager?: EntityManager): void;
/**
 * Allow to omit some property from a class.
 * @param Class
 * @param keys
 * @constructor
 */
export declare const Omit: <T, K extends keyof T>(Class: new () => T, keys: K[]) => new () => Omit<T, K>;
/**
 * Lower case the first character of the input string.
 * @param str
 */
export declare function lowerCaseFirst(str: string): string;
/**
 * Upper case the first character of the input string.
 * @param str
 */
export declare function upperCaseFirst(str: string): string;
