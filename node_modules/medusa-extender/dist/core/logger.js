"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const chalk_1 = require("chalk");
/**
 * @internal
 * Internal logger to display information about the build.
 */
class Logger {
    constructor(context, app) {
        this.logsQueue = [];
        this._context = context;
        this._app = app;
    }
    get context() {
        return this._context;
    }
    get app() {
        return this._app;
    }
    static contextualize(context, app = 'Server') {
        return new Logger(context, app);
    }
    /**
     * Push new logs to queue and then show them later on.
     * @param description
     * @param variables
     */
    push(description, ...variables) {
        const date = new Date().toLocaleString('en-US', { hour12: true });
        this.logsQueue.push([
            `${(0, chalk_1.blue)(`[${this._app}]      -`)} ${date}   ${(0, chalk_1.yellow)(`[${this._context}]`)} ${(0, chalk_1.blue)(description)}`,
            ...variables,
        ]);
        return this;
    }
    /**
     * Display log immediately.
     * @param description
     * @param variables
     */
    log(description, ...variables) {
        return this.buildLog(chalk_1.blue, description, ...variables);
    }
    /**
     * Display warning immediately.
     * @param description
     * @param variables
     */
    warn(description, ...variables) {
        return this.buildLog(chalk_1.yellow, description, ...variables);
    }
    /**
     * Display error logs in red immediately
     * @param description
     * @param variables
     */
    error(description, ...variables) {
        return this.buildLog(chalk_1.red, description, ...variables);
    }
    /**
     * display all queues logs and then reset the queue.
     */
    flush() {
        if (this.logsQueue.length) {
            this.logsQueue.map((logArgs) => {
                console.log(...logArgs);
            });
            this.logsQueue.length = 0;
        }
        return this;
    }
    /**
     * Build logs taking in count the level color
     * @param color
     * @param description
     * @param variables
     */
    buildLog(color, description, ...variables) {
        const date = new Date().toLocaleString('en-US', { hour12: true });
        console.log(`${(0, chalk_1.blue)(`[${this._app}]      -`)} ${date}   ${(0, chalk_1.yellow)(`[${this._context}]`)} ${color(description)}`, ...variables);
        return this;
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map