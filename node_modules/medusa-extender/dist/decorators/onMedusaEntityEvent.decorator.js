"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OnMedusaEntityEvent_when, _OnMedusaEntityEvent_targetEntity;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnMedusaEntityEvent = void 0;
require("reflect-metadata");
const core_1 = require("../core");
class OnMedusaEntityEvent {
    constructor(when) {
        _OnMedusaEntityEvent_when.set(this, void 0);
        _OnMedusaEntityEvent_targetEntity.set(this, void 0);
        __classPrivateFieldSet(this, _OnMedusaEntityEvent_when, when, "f");
    }
    static get Before() {
        return this.build('Before');
    }
    static get After() {
        return this.build('After');
    }
    static build(when) {
        return new OnMedusaEntityEvent(when);
    }
    InsertEvent(entity) {
        return `${__classPrivateFieldGet(this, _OnMedusaEntityEvent_when, "f")}Insert${entity.name}`;
    }
    UpdateEvent(entity) {
        return `${__classPrivateFieldGet(this, _OnMedusaEntityEvent_when, "f")}Update${entity.name}`;
    }
    RemoveEvent(entity) {
        return `${__classPrivateFieldGet(this, _OnMedusaEntityEvent_when, "f")}Remove${entity.name}`;
    }
    Insert(entity, options = { async: false }) {
        return this.buildDecorator('Insert', entity, options);
    }
    Update(entity, options = { async: false }) {
        return this.buildDecorator('Update', entity, options);
    }
    Remove(entity, options = { async: false }) {
        return this.buildDecorator('Remove', entity, options);
    }
    buildDecorator(action, entity, options = { async: false }) {
        __classPrivateFieldSet(this, _OnMedusaEntityEvent_targetEntity, entity, "f");
        return OnMedusaEntityEventDecorator(`${__classPrivateFieldGet(this, _OnMedusaEntityEvent_when, "f")}${action}${entity.name}`, entity, options);
    }
}
exports.OnMedusaEntityEvent = OnMedusaEntityEvent;
_OnMedusaEntityEvent_when = new WeakMap(), _OnMedusaEntityEvent_targetEntity = new WeakMap();
/**
 * Allow to decorate a class method to register it as an event handler for an entity event.
 * @param eventName The event that we are listening to
 * @param targetEntity The entity for which the event is triggered
 * @param async Should the event be awaiting the result
 * @param customMetatype The key that represent the class in the container it belongs to (Used to resolve the real instance)
 */
function OnMedusaEntityEventDecorator(eventName, targetEntity, { async, metatype } = {
    async: false,
}) {
    return (target, propertyKey, descriptor) => {
        const original = descriptor.value;
        descriptor.value = async function (...args) {
            const { values, resolveOrReject } = args.pop();
            if (!(values.event.entity instanceof targetEntity)) {
                return;
            }
            const promise = original.apply(this, [values]);
            if (async) {
                return promise
                    .then((res) => {
                    return resolveOrReject(null, res);
                })
                    .catch((err) => {
                    return resolveOrReject(err);
                });
            }
            else {
                return resolveOrReject();
            }
        };
        core_1.customEventEmitter.register(eventName, propertyKey, metatype !== null && metatype !== void 0 ? metatype : target.constructor);
    };
}
//# sourceMappingURL=onMedusaEntityEvent.decorator.js.map