import { EntityInjectableOptions, MiddlewareInjectionOptions, RepositoryInjectableOptions, RouterInjectionOptions, ServiceInjectableOptions, ValidatorInjectionOptions } from '../core';
/**
 * Mark a class as an entity to be used by the loader.
 * @param options
 * @constructor
 */
export declare function Entity<T = unknown>(options?: EntityInjectableOptions<T>): ClassDecorator;
/**
 * Mark a class as a service to be used by the loader.
 * @param options
 * @constructor
 */
export declare function Service<T = unknown>(options?: ServiceInjectableOptions<T>): ClassDecorator;
/**
 * Mark a class as a repository to be used by the loader.
 * @param options
 * @constructor
 */
export declare function Repository<T = unknown>(options?: RepositoryInjectableOptions<T>): ClassDecorator;
/**
 * Mark a class as a middleware to be used by the loader.
 * @param options
 * @constructor
 */
export declare function Middleware(options: MiddlewareInjectionOptions): ClassDecorator;
/**
 * Mark a class as a migration to be used by the loader.
 * @constructor
 */
export declare function Migration(): ClassDecorator;
/**
 * Mark a class as a router to be used by the loader.
 * @param options
 * @constructor
 */
export declare function Router(options: RouterInjectionOptions): ClassDecorator;
/**
 * Mark a class as a validator to be used by the validator utility.
 * @param options
 * @constructor
 */
export declare function Validator(options: ValidatorInjectionOptions): ClassDecorator;
/**
 * Mark a class as a subscriber.
 * @constructor
 */
export declare function Subscriber(): ClassDecorator;
