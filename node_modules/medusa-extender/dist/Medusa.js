"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Medusa_express, _Medusa_rootDir;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Medusa = void 0;
const loaders_1 = require("@medusajs/medusa/dist/loaders");
const dist_1 = require("medusa-core-utils/dist");
const getEndpoints = require("express-list-endpoints");
const core_1 = require("./core");
const loaders_2 = require("./loaders");
const monitoring_1 = require("./modules/monitoring");
const logger = core_1.Logger.contextualize('Medusa');
/**
 * Load medusa and apply all components
 */
class Medusa {
    /**
     * @param rootDir Directory where the `medusa-config` is located
     * @param express Express instance
     */
    constructor(rootDir, express) {
        _Medusa_express.set(this, void 0);
        _Medusa_rootDir.set(this, void 0);
        __classPrivateFieldSet(this, _Medusa_express, express, "f");
        __classPrivateFieldSet(this, _Medusa_rootDir, rootDir, "f");
    }
    /**
     * @param modules The modules to load into medusa
     */
    async load(modules) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const { configModule } = (0, dist_1.getConfigFile)(__classPrivateFieldGet(this, _Medusa_rootDir, "f"), 'medusa-config');
        const moduleComponentsOptions = await (0, loaders_2.modulesLoader)(modules, configModule);
        await (0, monitoring_1.loadMonitoringModule)(configModule, __classPrivateFieldGet(this, _Medusa_express, "f"), configModule.monitoring);
        await (0, loaders_2.validatorsLoader)((_a = moduleComponentsOptions.get('validator')) !== null && _a !== void 0 ? _a : []);
        await (0, loaders_2.overrideEntitiesLoader)((_b = moduleComponentsOptions.get('entity')) !== null && _b !== void 0 ? _b : []);
        await (0, loaders_2.overrideRepositoriesLoader)((_c = moduleComponentsOptions.get('repository')) !== null && _c !== void 0 ? _c : []);
        await (0, loaders_2.customApiLoader)(__classPrivateFieldGet(this, _Medusa_express, "f"), (_d = moduleComponentsOptions.get('middleware')) !== null && _d !== void 0 ? _d : [], (_e = moduleComponentsOptions.get('router')) !== null && _e !== void 0 ? _e : []);
        await (0, loaders_2.adminApiLoader)(__classPrivateFieldGet(this, _Medusa_express, "f"), (_f = moduleComponentsOptions.get('middleware')) !== null && _f !== void 0 ? _f : [], (_g = moduleComponentsOptions.get('router')) !== null && _g !== void 0 ? _g : []);
        await (0, loaders_2.storeApiLoader)(__classPrivateFieldGet(this, _Medusa_express, "f"), (_h = moduleComponentsOptions.get('middleware')) !== null && _h !== void 0 ? _h : [], (_j = moduleComponentsOptions.get('router')) !== null && _j !== void 0 ? _j : []);
        await (0, loaders_2.databaseLoader)((_k = moduleComponentsOptions.get('entity')) !== null && _k !== void 0 ? _k : [], (_l = moduleComponentsOptions.get('repository')) !== null && _l !== void 0 ? _l : [], (_m = moduleComponentsOptions.get('migration')) !== null && _m !== void 0 ? _m : []);
        await (0, loaders_2.pluginsLoadersAndListeners)(__classPrivateFieldGet(this, _Medusa_express, "f"));
        await (0, loaders_2.servicesLoader)((_o = moduleComponentsOptions.get('service')) !== null && _o !== void 0 ? _o : []);
        await (0, loaders_2.subscribersLoader)((_p = moduleComponentsOptions.get('subscriber')) !== null && _p !== void 0 ? _p : []);
        const { container } = await (0, loaders_1.default)({
            isTest: process.env.NODE_ENV === 'test',
            directory: __classPrivateFieldGet(this, _Medusa_rootDir, "f"),
            expressApp: __classPrivateFieldGet(this, _Medusa_express, "f"),
        });
        const endPoints = getEndpoints(__classPrivateFieldGet(this, _Medusa_express, "f"));
        for (const endPoint of endPoints) {
            endPoint.methods.map((method) => {
                logger.push('Route Mapped {%s, %s}', endPoint.path, method);
            });
        }
        logger.flush();
        return container;
    }
}
exports.Medusa = Medusa;
_Medusa_express = new WeakMap(), _Medusa_rootDir = new WeakMap();
//# sourceMappingURL=Medusa.js.map