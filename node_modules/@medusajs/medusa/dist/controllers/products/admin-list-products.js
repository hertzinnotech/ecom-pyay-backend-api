"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var medusa_core_utils_1 = require("medusa-core-utils");
var get_query_config_1 = require("../../utils/get-query-config");
var listAndCount = function (scope, query, body, context) {
    if (context === void 0) { context = { limit: 50, offset: 0 }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var limit, offset, allowedFields, defaultFields, defaultRelations, productService, pricingService, includeFields, expandFields, orderBy, orderField, _a, field, listConfig, _b, rawProducts, count, products, includesPricing;
        var _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    limit = context.limit, offset = context.offset, allowedFields = context.allowedFields, defaultFields = context.defaultFields, defaultRelations = context.defaultRelations;
                    productService = scope.resolve("productService");
                    pricingService = scope.resolve("pricingService");
                    if (context.fields) {
                        includeFields = context.fields.split(",");
                    }
                    if (context.expand) {
                        expandFields = context.expand.split(",");
                    }
                    if (typeof context.order !== "undefined") {
                        orderField = context.order;
                        if (context.order.startsWith("-")) {
                            _a = __read(context.order.split("-"), 2), field = _a[1];
                            orderField = field;
                            orderBy = (_c = {}, _c[field] = "DESC", _c);
                        }
                        else {
                            orderBy = (_d = {}, _d[context.order] = "ASC", _d);
                        }
                        if (!(allowedFields || []).includes(orderField)) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Order field must be a valid product field");
                        }
                    }
                    listConfig = (0, get_query_config_1.getListConfig)(defaultFields !== null && defaultFields !== void 0 ? defaultFields : [], defaultRelations !== null && defaultRelations !== void 0 ? defaultRelations : [], includeFields, expandFields, limit, offset, orderBy);
                    return [4 /*yield*/, productService.listAndCount((0, lodash_1.pickBy)(query, function (val) { return typeof val !== "undefined"; }), listConfig)];
                case 1:
                    _b = __read.apply(void 0, [_e.sent(), 2]), rawProducts = _b[0], count = _b[1];
                    products = rawProducts;
                    includesPricing = ["variants", "variants.prices"].every(function (relation) { var _a; return (_a = listConfig === null || listConfig === void 0 ? void 0 : listConfig.relations) === null || _a === void 0 ? void 0 : _a.includes(relation); });
                    if (!includesPricing) return [3 /*break*/, 3];
                    return [4 /*yield*/, pricingService.setProductPrices(rawProducts)];
                case 2:
                    products = _e.sent();
                    _e.label = 3;
                case 3: return [2 /*return*/, {
                        products: products,
                        count: count,
                        offset: offset,
                        limit: limit,
                    }];
            }
        });
    });
};
exports.default = listAndCount;
//# sourceMappingURL=admin-list-products.js.map