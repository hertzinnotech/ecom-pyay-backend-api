"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineItem = void 0;
var typeorm_1 = require("typeorm");
var db_aware_column_1 = require("../utils/db-aware-column");
var line_item_tax_line_1 = require("./line-item-tax-line");
var swap_1 = require("./swap");
var cart_1 = require("./cart");
var order_1 = require("./order");
var claim_order_1 = require("./claim-order");
var product_variant_1 = require("./product-variant");
var line_item_adjustment_1 = require("./line-item-adjustment");
var base_entity_1 = require("../interfaces/models/base-entity");
var generate_entity_id_1 = require("../utils/generate-entity-id");
var LineItem = /** @class */ (function (_super) {
    __extends(LineItem, _super);
    function LineItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineItem.prototype.beforeInsert = function () {
        this.id = (0, generate_entity_id_1.generateEntityId)(this.id, "item");
    };
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "cart_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return cart_1.Cart; }, function (cart) { return cart.items; }),
        (0, typeorm_1.JoinColumn)({ name: "cart_id" }),
        __metadata("design:type", cart_1.Cart)
    ], LineItem.prototype, "cart", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return order_1.Order; }, function (order) { return order.items; }),
        (0, typeorm_1.JoinColumn)({ name: "order_id" }),
        __metadata("design:type", order_1.Order)
    ], LineItem.prototype, "order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "swap_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return swap_1.Swap; }, function (swap) { return swap.additional_items; }),
        (0, typeorm_1.JoinColumn)({ name: "swap_id" }),
        __metadata("design:type", swap_1.Swap)
    ], LineItem.prototype, "swap", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "claim_order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return claim_order_1.ClaimOrder; }, function (co) { return co.additional_items; }),
        (0, typeorm_1.JoinColumn)({ name: "claim_order_id" }),
        __metadata("design:type", claim_order_1.ClaimOrder)
    ], LineItem.prototype, "claim_order", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return line_item_tax_line_1.LineItemTaxLine; }, function (tl) { return tl.item; }, { cascade: ["insert"] }),
        __metadata("design:type", Array)
    ], LineItem.prototype, "tax_lines", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return line_item_adjustment_1.LineItemAdjustment; }, function (lia) { return lia.item; }, {
            cascade: ["insert"],
        }),
        __metadata("design:type", Array)
    ], LineItem.prototype, "adjustments", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], LineItem.prototype, "title", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "description", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "text", nullable: true }),
        __metadata("design:type", Object)
    ], LineItem.prototype, "thumbnail", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: false }),
        __metadata("design:type", Boolean)
    ], LineItem.prototype, "is_return", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: false }),
        __metadata("design:type", Boolean)
    ], LineItem.prototype, "is_giftcard", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: true }),
        __metadata("design:type", Boolean)
    ], LineItem.prototype, "should_merge", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: true }),
        __metadata("design:type", Boolean)
    ], LineItem.prototype, "allow_discounts", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", Boolean)
    ], LineItem.prototype, "has_shipping", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int" }),
        __metadata("design:type", Number)
    ], LineItem.prototype, "unit_price", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], LineItem.prototype, "variant_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return product_variant_1.ProductVariant; }, { eager: true }),
        (0, typeorm_1.JoinColumn)({ name: "variant_id" }),
        __metadata("design:type", product_variant_1.ProductVariant)
    ], LineItem.prototype, "variant", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int" }),
        __metadata("design:type", Number)
    ], LineItem.prototype, "quantity", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true, type: "int" }),
        __metadata("design:type", Number)
    ], LineItem.prototype, "fulfilled_quantity", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true, type: "int" }),
        __metadata("design:type", Number)
    ], LineItem.prototype, "returned_quantity", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true, type: "int" }),
        __metadata("design:type", Number)
    ], LineItem.prototype, "shipped_quantity", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], LineItem.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], LineItem.prototype, "beforeInsert", null);
    LineItem = __decorate([
        (0, typeorm_1.Check)("\"fulfilled_quantity\" <= \"quantity\""),
        (0, typeorm_1.Check)("\"shipped_quantity\" <= \"fulfilled_quantity\""),
        (0, typeorm_1.Check)("\"returned_quantity\" <= \"quantity\""),
        (0, typeorm_1.Check)("\"quantity\" > 0"),
        (0, typeorm_1.Entity)()
    ], LineItem);
    return LineItem;
}(base_entity_1.BaseEntity));
exports.LineItem = LineItem;
/**
 * @schema line_item
 * title: "Line Item"
 * description: "Line Items represent purchasable units that can be added to a Cart for checkout. When Line Items are purchased they will get copied to the resulting order and can eventually be referenced in Fulfillments and Returns. Line Items may also be created when processing Swaps and Claims."
 * x-resourceId: line_item
 * properties:
 *   id:
 *     description: "The id of the Line Item. This value will be prefixed by `item_`."
 *     type: string
 *   cart_id:
 *     description: "The id of the Cart that the Line Item belongs to."
 *     type: string
 *   order_id:
 *     description: "The id of the Order that the Line Item belongs to."
 *     type: string
 *   swap_id:
 *     description: "The id of the Swap that the Line Item belongs to."
 *     type: string
 *   claim_order_id:
 *     description: "The id of the Claim that the Line Item belongs to."
 *     type: string
 *   title:
 *     description: "The title of the Line Item, this should be easily identifiable by the Customer."
 *     type: string
 *   description:
 *     description: "A more detailed description of the contents of the Line Item."
 *     type: string
 *   thumbnail:
 *     description: "A URL string to a small image of the contents of the Line Item."
 *     type: string
 *   is_giftcard:
 *     description: "Flag to indicate if the Line Item is a Gift Card."
 *     type: boolean
 *   should_merge:
 *     description: "Flag to indicate if new Line Items with the same variant should be merged or added as an additional Line Item."
 *     type: boolean
 *   allow_discounts:
 *     description: "Flag to indicate if the Line Item should be included when doing discount calculations."
 *     type: boolean
 *   unit_price:
 *     description: "The price of one unit of the content in the Line Item. This should be in the currency defined by the Cart/Order/Swap/Claim that the Line Item belongs to."
 *     type: boolean
 *   variant_id:
 *     description: "The id of the Product Variant contained in the Line Item."
 *     type: string
 *   variant:
 *     description: "The Product Variant contained in the Line Item."
 *     anyOf:
 *       - $ref: "#/components/schemas/product_variant"
 *   quantity:
 *     description: "The quantity of the content in the Line Item."
 *     type: integer
 *   fulfilled_quantity:
 *     description: "The quantity of the Line Item that has been fulfilled."
 *     type: integer
 *   returned_quantity:
 *     description: "The quantity of the Line Item that has been returned."
 *     type: integer
 *   shipped_quantity:
 *     description: "The quantity of the Line Item that has been shipped."
 *     type: integer
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 *   refundable:
 *     description: "The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration."
 *     type: integer
 */
//# sourceMappingURL=line-item.js.map